generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id   String @id
  name String @unique
}

model Post {
  id             String   @id
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  authorId       String
  favouritedById String
  averageRating  Float
  title          String
}

model User {
  id          String    @id
  name        String
  age         Int
  email       String
  preferences Json
  role        User_role @default(BASIC)

  @@unique([name, age])
  @@index([email])
}

model UserPreferences {
  id           String  @id
  emailUpdates Boolean @default(true)
  userId       String  @unique
}

model CategoryToPost {
  A String
  B String

  @@unique([A, B], map: "_CategoryToPost_AB_unique")
  @@index([B], map: "_CategoryToPost_B_index")
  @@map("_CategoryToPost")
}

model T3ShoppingItem {
  id      String  @id @default(cuid())
  name    String
  checked Boolean @default(false)
}

model WebDevPost {
  id       String          @id @default(uuid())
  title    String
  body     String
  comments WebDevComment[]
}

model WebDevUser {
  id       String          @id @default(uuid())
  name     String
  comments WebDevComment[]
  likes    WebDevLike[]
}

model WebDevComment {
  id        String          @id @default(uuid())
  message   String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    String
  postId    String
  parentId  String?
  user      WebDevUser      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      WebDevPost      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    WebDevComment?  @relation("ParentComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  WebDevComment[] @relation("ParentComment")
  likes     WebDevLike[]
}

model WebDevLike {
  userId    String
  commentId String
  user      WebDevUser    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   WebDevComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([commentId, userId])
}

enum User_role {
  ADMIN
  BASIC
  EDITOR
}
